import { desc, eq } from "drizzle-orm";
import { z } from "zod";

import { schema } from "@media/db";
import {
  brandingColors,
  brandingColorTypes,
  brandingImages,
  brandingImageTypes,
  brandings,
} from "@media/db/schema/branding";

import { createTRPCRouter, publicProcedure } from "../trpc";
import { createCreateQuery, createDeleteQuery } from "./commonRouter";

export const brandingRouter = createTRPCRouter({
  all: publicProcedure.query(({ ctx }) => {
    return ctx.db.query.brandings.findMany({
      orderBy: desc(schema.brandings.id),
    });
  }),

  byId: publicProcedure
    .input(z.object({ id: z.number() }))
    .query(({ ctx, input }) => {
      return ctx.db.query.brandings.findFirst({
        where: eq(schema.brandings.id, input.id),
      });
    }),

  create: createCreateQuery<typeof brandings>(
    brandings,
    z.object({
      title: z.string().min(1),
    }),
  ),
  delete: createDeleteQuery<typeof brandings>(brandings),
});

export const brandingColorRouter = createTRPCRouter({
  all: publicProcedure.query(({ ctx }) => {
    return ctx.db.query.brandingColors.findMany({
      orderBy: desc(schema.brandingColors.id),
    });
  }),

  byId: publicProcedure
    .input(z.object({ id: z.number() }))
    .query(({ ctx, input }) => {
      return ctx.db.query.brandingColors.findFirst({
        where: eq(schema.brandingColors.id, input.id),
      });
    }),

  create: createCreateQuery<typeof brandingColors>(
    brandingColors,
    z.object({
      title: z.string().min(1),
    }),
  ),
  delete: createDeleteQuery<typeof brandingColors>(brandingColors),
});

export const brandingColorTypeRouter = createTRPCRouter({
  all: publicProcedure.query(({ ctx }) => {
    return ctx.db.query.brandingColorTypes.findMany({
      orderBy: desc(schema.brandingColorTypes.id),
    });
  }),

  byId: publicProcedure
    .input(z.object({ id: z.number() }))
    .query(({ ctx, input }) => {
      return ctx.db.query.brandingColorTypes.findFirst({
        where: eq(schema.brandingColorTypes.id, input.id),
      });
    }),

  create: createCreateQuery<typeof brandingColorTypes>(
    brandingColorTypes,
    z.object({
      title: z.string().min(1),
    }),
  ),
  delete: createDeleteQuery<typeof brandingColorTypes>(brandingColorTypes),
});

export const brandingImageRouter = createTRPCRouter({
  all: publicProcedure.query(({ ctx }) => {
    return ctx.db.query.brandingImages.findMany({
      orderBy: desc(schema.brandingImages.id),
    });
  }),

  byId: publicProcedure
    .input(z.object({ id: z.number() }))
    .query(({ ctx, input }) => {
      return ctx.db.query.brandingImages.findFirst({
        where: eq(schema.brandingImages.id, input.id),
      });
    }),

  create: createCreateQuery<typeof brandingImages>(
    brandingImages,
    z.object({
      title: z.string().min(1),
    }),
  ),
  delete: createDeleteQuery<typeof brandingImages>(brandingImages),
});

export const brandingImageTypeRouter = createTRPCRouter({
  all: publicProcedure.query(({ ctx }) => {
    return ctx.db.query.brandingImageTypes.findMany({
      orderBy: desc(schema.brandingImageTypes.id),
    });
  }),

  byId: publicProcedure
    .input(z.object({ id: z.number() }))
    .query(({ ctx, input }) => {
      return ctx.db.query.brandingImageTypes.findFirst({
        where: eq(schema.brandingImageTypes.id, input.id),
      });
    }),

  create: createCreateQuery<typeof brandingImageTypes>(
    brandingImageTypes,
    z.object({
      title: z.string().min(1),
    }),
  ),
  delete: createDeleteQuery<typeof brandingImageTypes>(brandingImageTypes),
});
